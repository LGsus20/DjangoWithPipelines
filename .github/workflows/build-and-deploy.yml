#To test the pipeline locally it is recommneded to install: https://github.com/nektos/act

# TO DOs:
# - Find an alternative to StrictHostKeyChecking=no
# - Create a deployment user on the server instead of using the root user

name: Pipeline for CI/CD
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs: 
  build:
    runs-on: ubuntu-latest
    env:
      DEPLOY_PATH: /root/webapp # Location on server to deploy app

    steps:
      # If docker compose is already installed in the runner (UNCOMMENT LATER)
      # - name: Set up Docker Compose
      #   uses: docker/setup-compose-action@v1.2.0
      #   with:
      #     version: latest

      # Build the Docker image (PENDING)

      # Docker push image to Docker Hub (PENDING)

      # Set SSH key to access the server
      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Connect to the server. In a production environment other options are preferred over using -o StrickHostKeyChecking=no
      - name: SSH into server, prepare deployment directory and clone repository
        run: |
          ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_IP }} " \
            mkdir -p ${{ env.DEPLOY_PATH }} && \
            rm -rf ${{ env.DEPLOY_PATH }}/{*,.*} 2>/dev/null && \
            git clone https://github.com/LGsus20/DjangoWithPipelines.git ${{ env.DEPLOY_PATH }} \
          "

      # ENV file to runner
      - name: Create .env file
        run: echo "${{ secrets.ENV_FILE_CONTENT }}" > .env

      # Domain.cert to runner
      - name: Create domain.cert.pem file
        run: echo "${{ secrets.CERT_PEM_CONTENT }}" > domain.cert.pem

      # private.key.pem to runner
      - name: Create private.key.pem file
        run: echo "${{ secrets.KEY_PEM_CONTENT }}" > private.key.pem


      # Copy files to server
      - name: Copy ENV and SSL certificates to server
        run: |
          scp -o StrictHostKeyChecking=no .env root@${{ secrets.SERVER_IP }}:${{ env.DEPLOY_PATH }}/.env
          scp -o StrictHostKeyChecking=no domain.cert.pem root@${{ secrets.SERVER_IP }}:${{ env.DEPLOY_PATH }}/domain.cert.pem
          scp -o StrictHostKeyChecking=no private.key.pem root@${{ secrets.SERVER_IP }}:${{ env.DEPLOY_PATH }}/private.key.pem

      # Delete files from runner
      - name: Clean up local files
        if: always() # This will ALWAYS run even if previous steps failed
        run: |
          rm -f .env
          rm -f domain.cert.pem
          rm -f private.key.pem
      
      # Run docker compose, make and run migrations
      - name: Deploy application on server
        run: |
          ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_IP }} "cd ${{ env.DEPLOY_PATH }} && \
          docker compose -f docker-compose_production.yml up --build -d && \
          docker compose -f docker-compose_production.yml exec web python manage.py migrate"